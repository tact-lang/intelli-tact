// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: tact.flex

package org.tonstudio.tact.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static org.tonstudio.tact.lang.psi.TactTokenTypes.*;
import static org.tonstudio.tact.lang.psi.TactDocElementTypes.DOC_COMMENT;


public class _TactLexer implements FlexLexer, TactTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int MULTI_LINE_COMMENT_STATE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u1f00\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u0100\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u1f00\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
    "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
    "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
    "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
    "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\27\u1f00\1\u5e00\1\u5f00"+
    "\1\u6000\1\u6100\11\u1f00\1\u6200\1\u6300\5\u1f00\1\u6400\1\u6500"+
    "\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100\1\u6800\1\u6900"+
    "\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100\1\u6c00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\2\0\1\11\1\12\1\0\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\6\25\2\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\4\36\10\40\1\41\1\42\7\40"+
    "\1\43\2\40\1\44\1\45\1\46\1\47\1\50\1\0"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\40\1\57"+
    "\1\60\2\40\1\61\1\62\1\63\1\64\1\65\1\40"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\40\1\76\1\77\1\100\1\101\6\0\1\3\44\0"+
    "\1\40\12\0\1\40\4\0\1\40\5\0\27\40\1\0"+
    "\37\40\1\0\u01ca\40\4\0\14\40\16\0\5\40\7\0"+
    "\1\40\1\0\1\40\201\0\5\40\1\0\2\40\2\0"+
    "\4\40\1\0\1\40\6\0\1\40\1\0\3\40\1\0"+
    "\1\40\1\0\24\40\1\0\123\40\1\0\213\40\10\0"+
    "\246\40\1\0\46\40\2\0\1\40\6\0\51\40\107\0"+
    "\33\40\4\0\4\40\55\0\53\40\25\0\12\102\4\0"+
    "\2\40\1\0\143\40\1\0\1\40\17\0\2\40\7\0"+
    "\2\40\12\102\3\40\2\0\1\40\20\0\1\40\1\0"+
    "\36\40\35\0\131\40\13\0\1\40\16\0\12\102\41\40"+
    "\11\0\2\40\4\0\1\40\5\0\26\40\4\0\1\40"+
    "\11\0\1\40\3\0\1\40\27\0\31\40\7\0\13\40"+
    "\65\0\25\40\1\0\10\40\106\0\66\40\3\0\1\40"+
    "\22\0\1\40\7\0\12\40\4\0\12\102\1\0\20\40"+
    "\4\0\10\40\2\0\2\40\2\0\26\40\1\0\7\40"+
    "\1\0\1\40\3\0\4\40\3\0\1\40\20\0\1\40"+
    "\15\0\2\40\1\0\3\40\4\0\12\102\2\40\12\0"+
    "\1\40\10\0\6\40\4\0\2\40\2\0\26\40\1\0"+
    "\7\40\1\0\2\40\1\0\2\40\1\0\2\40\37\0"+
    "\4\40\1\0\1\40\7\0\12\102\2\0\3\40\20\0"+
    "\11\40\1\0\3\40\1\0\26\40\1\0\7\40\1\0"+
    "\2\40\1\0\5\40\3\0\1\40\22\0\1\40\17\0"+
    "\2\40\4\0\12\102\11\0\1\40\13\0\10\40\2\0"+
    "\2\40\2\0\26\40\1\0\7\40\1\0\2\40\1\0"+
    "\5\40\3\0\1\40\36\0\2\40\1\0\3\40\4\0"+
    "\12\102\1\0\1\40\21\0\1\40\1\0\6\40\3\0"+
    "\3\40\1\0\4\40\3\0\2\40\1\0\1\40\1\0"+
    "\2\40\3\0\2\40\3\0\3\40\3\0\14\40\26\0"+
    "\1\40\25\0\12\102\25\0\10\40\1\0\3\40\1\0"+
    "\27\40\1\0\20\40\3\0\1\40\32\0\3\40\5\0"+
    "\2\40\4\0\12\102\20\0\1\40\4\0\10\40\1\0"+
    "\3\40\1\0\27\40\1\0\12\40\1\0\5\40\3\0"+
    "\1\40\40\0\1\40\1\0\2\40\4\0\12\102\1\0"+
    "\2\40\22\0\10\40\1\0\3\40\1\0\51\40\2\0"+
    "\1\40\20\0\1\40\5\0\3\40\10\0\3\40\4\0"+
    "\12\102\12\0\6\40\5\0\22\40\3\0\30\40\1\0"+
    "\11\40\1\0\1\40\2\0\7\40\37\0\12\102\21\0"+
    "\60\40\1\0\2\40\14\0\7\40\11\0\12\102\47\0"+
    "\2\40\1\0\1\40\1\0\5\40\1\0\30\40\1\0"+
    "\1\40\1\0\12\40\1\0\2\40\11\0\1\40\2\0"+
    "\5\40\1\0\1\40\11\0\12\102\2\0\4\40\40\0"+
    "\1\40\37\0\12\102\26\0\10\40\1\0\44\40\33\0"+
    "\5\40\163\0\53\40\24\0\1\40\12\102\6\0\6\40"+
    "\4\0\4\40\3\0\1\40\3\0\2\40\7\0\3\40"+
    "\4\0\15\40\14\0\1\40\1\0\12\102\6\0\46\40"+
    "\1\0\1\40\5\0\1\40\2\0\53\40\1\0\115\40"+
    "\1\0\4\40\2\0\7\40\1\0\1\40\1\0\4\40"+
    "\2\0\51\40\1\0\4\40\2\0\41\40\1\0\4\40"+
    "\2\0\7\40\1\0\1\40\1\0\4\40\2\0\17\40"+
    "\1\0\71\40\1\0\4\40\2\0\103\40\45\0\20\40"+
    "\20\0\126\40\2\0\6\40\3\0\u016c\40\2\0\21\40"+
    "\1\0\32\40\5\0\113\40\6\0\10\40\7\0\15\40"+
    "\1\0\4\40\16\0\22\40\16\0\22\40\16\0\15\40"+
    "\1\0\3\40\17\0\64\40\43\0\1\40\4\0\1\40"+
    "\3\0\12\102\46\0\12\102\6\0\131\40\7\0\5\40"+
    "\2\0\42\40\1\0\1\40\5\0\106\40\12\0\37\40"+
    "\47\0\12\102\36\40\2\0\5\40\13\0\54\40\4\0"+
    "\32\40\6\0\12\102\46\0\27\40\11\0\65\40\53\0"+
    "\12\102\6\0\12\102\15\0\1\40\135\0\57\40\21\0"+
    "\7\40\4\0\12\102\51\0\36\40\15\0\2\40\12\102"+
    "\54\40\32\0\44\40\34\0\12\102\3\0\3\40\12\102"+
    "\44\40\2\0\11\40\7\0\53\40\2\0\3\40\51\0"+
    "\4\40\1\0\6\40\1\0\2\40\3\0\1\40\5\0"+
    "\300\40\100\0\26\40\2\0\6\40\2\0\46\40\2\0"+
    "\6\40\2\0\10\40\1\0\1\40\1\0\1\40\1\0"+
    "\1\40\1\0\37\40\2\0\65\40\1\0\7\40\1\0"+
    "\1\40\3\0\3\40\1\0\7\40\3\0\4\40\2\0"+
    "\6\40\4\0\15\40\5\0\3\40\1\0\7\40\53\0"+
    "\2\3\107\0\1\40\15\0\1\40\20\0\15\40\145\0"+
    "\1\40\4\0\1\40\2\0\12\40\1\0\1\40\3\0"+
    "\5\40\6\0\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\4\40\1\0\13\40\2\0\4\40\5\0\5\40\4\0"+
    "\1\40\64\0\2\40\u017b\0\57\40\1\0\57\40\1\0"+
    "\205\40\6\0\4\40\3\0\2\40\14\0\46\40\1\0"+
    "\1\40\5\0\1\40\2\0\70\40\7\0\1\40\20\0"+
    "\27\40\11\0\7\40\1\0\7\40\1\0\7\40\1\0"+
    "\7\40\1\0\7\40\1\0\7\40\1\0\7\40\1\0"+
    "\7\40\120\0\1\40\325\0\2\40\52\0\5\40\5\0"+
    "\2\40\4\0\126\40\6\0\3\40\1\0\132\40\1\0"+
    "\4\40\5\0\53\40\1\0\136\40\21\0\33\40\65\0"+
    "\306\40\112\0\360\40\20\0\215\40\103\0\56\40\2\0"+
    "\15\40\3\0\20\40\12\102\2\40\24\0\57\40\20\0"+
    "\37\40\2\0\106\40\61\0\11\40\2\0\147\40\2\0"+
    "\65\40\2\0\5\40\60\0\13\40\1\0\3\40\1\0"+
    "\4\40\1\0\27\40\35\0\64\40\16\0\62\40\34\0"+
    "\12\102\30\0\6\40\3\0\1\40\1\0\2\40\1\0"+
    "\12\102\34\40\12\0\27\40\31\0\35\40\7\0\57\40"+
    "\34\0\1\40\12\102\6\0\5\40\1\0\12\40\12\102"+
    "\5\40\1\0\51\40\27\0\3\40\1\0\10\40\4\0"+
    "\12\102\6\0\27\40\3\0\1\40\3\0\62\40\1\0"+
    "\1\40\3\0\2\40\2\0\5\40\2\0\1\40\1\0"+
    "\1\40\30\0\3\40\2\0\13\40\7\0\3\40\14\0"+
    "\6\40\2\0\6\40\2\0\6\40\11\0\7\40\1\0"+
    "\7\40\1\0\53\40\1\0\14\40\10\0\163\40\15\0"+
    "\12\102\6\0\244\40\14\0\27\40\4\0\61\40\4\0"+
    "\u0100\3\156\40\2\0\152\40\46\0\7\40\14\0\5\40"+
    "\5\0\1\40\1\0\12\40\1\0\15\40\1\0\5\40"+
    "\1\0\1\40\1\0\2\40\1\0\2\40\1\0\154\40"+
    "\41\0\153\40\22\0\100\40\2\0\66\40\50\0\14\40"+
    "\164\0\5\40\1\0\207\40\23\0\12\102\7\0\32\40"+
    "\6\0\32\40\13\0\131\40\3\0\6\40\2\0\6\40"+
    "\2\0\6\40\2\0\3\40\43\0\14\40\1\0\32\40"+
    "\1\0\23\40\1\0\2\40\1\0\17\40\2\0\16\40"+
    "\42\0\173\40\205\0\35\40\3\0\61\40\57\0\40\40"+
    "\15\0\24\40\1\0\10\40\6\0\46\40\12\0\36\40"+
    "\2\0\44\40\4\0\10\40\60\0\236\40\2\0\12\102"+
    "\6\0\44\40\4\0\44\40\4\0\50\40\10\0\64\40"+
    "\234\0\67\40\11\0\26\40\12\0\10\40\230\0\6\40"+
    "\2\0\1\40\1\0\54\40\1\0\2\40\3\0\1\40"+
    "\2\0\27\40\12\0\27\40\11\0\37\40\101\0\23\40"+
    "\1\0\2\40\12\0\26\40\12\0\32\40\106\0\70\40"+
    "\6\0\2\40\100\0\1\40\17\0\4\40\1\0\3\40"+
    "\1\0\35\40\52\0\35\40\3\0\35\40\43\0\10\40"+
    "\1\0\34\40\33\0\66\40\12\0\26\40\12\0\23\40"+
    "\15\0\22\40\156\0\111\40\67\0\63\40\15\0\63\40"+
    "\15\0\44\40\14\0\12\102\306\0\35\40\12\0\1\40"+
    "\10\0\26\40\232\0\27\40\14\0\65\40\56\0\12\102"+
    "\23\0\55\40\40\0\31\40\7\0\12\102\11\0\44\40"+
    "\17\0\12\102\4\0\1\40\13\0\43\40\3\0\1\40"+
    "\14\0\60\40\16\0\4\40\13\0\12\102\1\40\1\0"+
    "\1\40\43\0\22\40\1\0\31\40\124\0\7\40\1\0"+
    "\1\40\1\0\4\40\1\0\17\40\1\0\12\40\7\0"+
    "\57\40\21\0\12\102\13\0\10\40\2\0\2\40\2\0"+
    "\26\40\1\0\7\40\1\0\2\40\1\0\5\40\3\0"+
    "\1\40\22\0\1\40\14\0\5\40\236\0\65\40\22\0"+
    "\4\40\5\0\12\102\5\0\1\40\40\0\60\40\24\0"+
    "\2\40\1\0\1\40\10\0\12\102\246\0\57\40\51\0"+
    "\4\40\44\0\60\40\24\0\1\40\13\0\12\102\46\0"+
    "\53\40\15\0\1\40\7\0\12\102\66\0\33\40\25\0"+
    "\12\102\306\0\54\40\164\0\100\40\12\102\25\0\1\40"+
    "\240\0\10\40\2\0\47\40\20\0\1\40\1\0\1\40"+
    "\34\0\1\40\12\0\50\40\7\0\1\40\25\0\1\40"+
    "\13\0\56\40\23\0\1\40\42\0\71\40\7\0\11\40"+
    "\1\0\45\40\21\0\1\40\17\0\12\102\30\0\36\40"+
    "\160\0\7\40\1\0\2\40\1\0\46\40\25\0\1\40"+
    "\11\0\12\102\6\0\6\40\1\0\2\40\1\0\40\40"+
    "\16\0\1\40\7\0\12\102\u0136\0\23\40\15\0\232\40"+
    "\346\0\304\40\274\0\57\40\321\0\107\40\271\0\71\40"+
    "\7\0\37\40\1\0\12\102\146\0\36\40\22\0\60\40"+
    "\20\0\4\40\14\0\12\102\11\0\25\40\5\0\23\40"+
    "\260\0\100\40\200\0\113\40\5\0\1\40\102\0\15\40"+
    "\100\0\2\40\1\0\1\40\34\0\370\40\10\0\363\40"+
    "\15\0\37\40\61\0\3\40\21\0\4\40\10\0\u018c\40"+
    "\4\0\153\40\5\0\15\40\3\0\11\40\7\0\12\40"+
    "\146\0\125\40\1\0\107\40\1\0\2\40\2\0\1\40"+
    "\2\0\2\40\2\0\4\40\1\0\14\40\1\0\1\40"+
    "\1\0\7\40\1\0\101\40\1\0\4\40\2\0\10\40"+
    "\1\0\7\40\1\0\34\40\1\0\4\40\1\0\5\40"+
    "\1\0\1\40\3\0\7\40\1\0\u0154\40\2\0\31\40"+
    "\1\0\31\40\1\0\37\40\1\0\31\40\1\0\37\40"+
    "\1\0\31\40\1\0\37\40\1\0\31\40\1\0\37\40"+
    "\1\0\31\40\1\0\10\40\2\0\62\102\55\40\12\0"+
    "\7\40\2\0\12\102\4\0\1\40\u0171\0\54\40\4\0"+
    "\12\102\6\0\305\40\73\0\104\40\7\0\1\40\4\0"+
    "\12\102\246\0\4\40\1\0\33\40\1\0\2\40\1\0"+
    "\1\40\2\0\1\40\1\0\12\40\1\0\4\40\1\0"+
    "\1\40\1\0\1\40\6\0\1\40\4\0\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\3\40\1\0\2\40\1\0"+
    "\1\40\2\0\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\0\1\40\2\0"+
    "\4\40\1\0\7\40\1\0\4\40\1\0\4\40\1\0"+
    "\1\40\1\0\12\40\1\0\21\40\5\0\3\40\1\0"+
    "\5\40\1\0\21\40\104\0\327\40\51\0\65\40\13\0"+
    "\336\40\2\0\u0182\40\16\0\u0131\40\37\0\36\40\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\2\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\30\1\31\1\32\1\33\23\30\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\0\3\42\2\0\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\4\0\1\57\1\60\1\0\1\61\1\62"+
    "\1\63\2\0\1\64\1\30\1\65\1\0\2\30\1\66"+
    "\5\30\1\67\1\30\1\70\15\30\1\0\1\71\1\72"+
    "\4\73\1\74\1\75\1\0\1\76\1\0\1\55\1\77"+
    "\1\100\1\101\1\102\1\103\1\0\1\104\1\0\1\105"+
    "\1\30\1\106\7\30\1\107\3\30\1\110\13\30\1\111"+
    "\4\30\1\112\1\113\4\0\1\77\1\114\1\100\5\0"+
    "\5\30\1\115\10\30\1\116\7\30\1\117\3\30\1\120"+
    "\2\0\2\100\1\121\1\122\1\30\1\123\1\30\1\124"+
    "\3\30\1\125\14\30\1\126\1\127\1\30\1\130\2\0"+
    "\1\30\1\131\4\30\1\132\1\133\1\134\1\30\1\135"+
    "\3\30\1\136\1\137\1\140\1\30\1\0\2\30\1\141"+
    "\1\30\1\142\1\143\2\30\1\144\1\145\1\0\1\146"+
    "\1\147\1\150\1\151\1\30\1\0\1\152\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\311"+
    "\0\u01d5\0\u0218\0\311\0\311\0\u025b\0\u029e\0\311\0\u02e1"+
    "\0\311\0\u0324\0\u0367\0\u03aa\0\311\0\311\0\u03ed\0\u0430"+
    "\0\u0473\0\311\0\311\0\u04b6\0\u04f9\0\311\0\311\0\u053c"+
    "\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754"+
    "\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c"+
    "\0\u09af\0\u09f2\0\u0a35\0\311\0\u0a78\0\311\0\311\0\u0abb"+
    "\0\311\0\u0afe\0\311\0\u0b41\0\u0b84\0\u010c\0\u0bc7\0\311"+
    "\0\311\0\311\0\u0c0a\0\311\0\311\0\311\0\311\0\311"+
    "\0\u0c4d\0\u0c90\0\311\0\u0cd3\0\u03aa\0\u0d16\0\u0d59\0\u0d9c"+
    "\0\311\0\u0ddf\0\311\0\311\0\u0e22\0\u0e65\0\u0ea8\0\311"+
    "\0\u0eeb\0\u04b6\0\u0f2e\0\u0f71\0\u0fb4\0\u04b6\0\u0ff7\0\u103a"+
    "\0\u107d\0\u10c0\0\u1103\0\u04b6\0\u1146\0\u1189\0\u11cc\0\u120f"+
    "\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427"+
    "\0\u146a\0\u14ad\0\u14f0\0\u1533\0\311\0\u1576\0\311\0\u15b9"+
    "\0\u15fc\0\u163f\0\311\0\311\0\u1682\0\311\0\u16c5\0\u1708"+
    "\0\u174b\0\u178e\0\u17d1\0\u1814\0\311\0\u1857\0\311\0\u189a"+
    "\0\311\0\u18dd\0\311\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c"+
    "\0\u1a6f\0\u1ab2\0\u04b6\0\u1af5\0\u1b38\0\u1b7b\0\u04b6\0\u1bbe"+
    "\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6"+
    "\0\u1e19\0\u1e5c\0\u04b6\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\311"+
    "\0\311\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\311\0\u20fa"+
    "\0\u213d\0\u17d1\0\u1814\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c"+
    "\0\u22cf\0\u2312\0\u04b6\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461"+
    "\0\u24a4\0\u24e7\0\u252a\0\u04b6\0\u256d\0\u25b0\0\u25f3\0\u2636"+
    "\0\u2679\0\u26bc\0\u26ff\0\u04b6\0\u2742\0\u2785\0\u27c8\0\u04b6"+
    "\0\u163f\0\u280b\0\u284e\0\u2891\0\311\0\311\0\u28d4\0\u04b6"+
    "\0\u2917\0\u04b6\0\u295a\0\u299d\0\u29e0\0\u04b6\0\u2a23\0\u2a66"+
    "\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e"+
    "\0\u2cc1\0\u2d04\0\u04b6\0\u04b6\0\u2d47\0\u04b6\0\u2d8a\0\u2891"+
    "\0\u2dcd\0\u04b6\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u04b6\0\u04b6"+
    "\0\u04b6\0\u2f1c\0\u04b6\0\u2f5f\0\u2fa2\0\u2fe5\0\u04b6\0\u04b6"+
    "\0\u04b6\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u04b6\0\u3134\0\u04b6"+
    "\0\u04b6\0\u3177\0\u31ba\0\u04b6\0\u04b6\0\u31fd\0\u04b6\0\u04b6"+
    "\0\u04b6\0\u04b6\0\u3240\0\u3283\0\u04b6\0\u32c6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\5\1\4\1\5\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\3\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\4\34\1\36"+
    "\1\4\1\37\1\40\1\34\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\34\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\34\1\64\1\65\1\66\1\67\1\4\10\70\1\71"+
    "\34\70\1\72\35\70\15\73\1\74\4\73\1\75\60\73"+
    "\104\0\1\76\2\0\1\76\1\0\1\76\13\0\1\77"+
    "\62\0\1\6\107\0\1\100\22\0\1\101\102\0\1\102"+
    "\62\0\1\103\17\0\1\104\102\0\1\105\102\0\1\106"+
    "\102\0\1\107\1\110\64\0\1\111\4\0\1\112\7\0"+
    "\1\113\73\0\4\24\14\0\1\114\4\0\1\115\1\0"+
    "\1\116\11\0\1\117\7\0\1\114\31\0\4\24\21\0"+
    "\1\115\63\0\1\120\1\121\17\0\1\122\62\0\1\123"+
    "\102\0\1\124\1\125\72\0\4\34\7\0\6\34\4\0"+
    "\26\34\4\0\1\34\23\0\4\34\4\0\1\126\2\0"+
    "\6\34\4\0\26\34\1\127\3\0\1\34\32\0\1\130"+
    "\73\0\4\34\7\0\6\34\4\0\2\34\1\131\14\34"+
    "\1\132\6\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\26\34\1\133\3\0\1\34\23\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\134\12\34\1\135\11\34\4\0"+
    "\1\34\23\0\4\34\7\0\6\34\4\0\14\34\1\136"+
    "\11\34\4\0\1\34\23\0\4\34\7\0\6\34\4\0"+
    "\11\34\1\137\12\34\1\140\1\34\4\0\1\34\23\0"+
    "\4\34\7\0\6\34\4\0\1\34\1\141\12\34\1\142"+
    "\4\34\1\143\4\34\4\0\1\34\23\0\4\34\7\0"+
    "\6\34\4\0\6\34\1\144\3\34\1\145\1\146\12\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\5\34"+
    "\1\147\20\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\21\34\1\150\4\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\1\34\1\151\17\34\1\152\4\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\22\34"+
    "\1\153\3\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\16\34\1\154\7\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\5\34\1\155\20\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\20\34\1\156\5\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\16\34"+
    "\1\157\7\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\13\34\1\160\12\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\10\34\1\161\15\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\7\34\1\162\1\163"+
    "\15\34\4\0\1\34\23\0\4\34\7\0\6\34\4\0"+
    "\26\34\1\164\3\0\1\34\32\0\1\165\44\0\1\166"+
    "\3\0\10\70\1\0\34\70\1\0\35\70\2\167\4\0"+
    "\15\167\3\170\43\167\1\171\2\167\1\172\6\167\22\0"+
    "\1\173\75\0\1\174\107\0\1\175\112\0\1\176\65\0"+
    "\1\177\65\0\2\200\1\0\2\200\1\0\14\200\1\201"+
    "\60\200\23\0\4\202\7\0\2\202\11\0\6\202\47\0"+
    "\2\203\101\0\3\204\107\0\1\205\56\0\1\206\126\0"+
    "\1\207\122\0\1\210\53\0\4\127\7\0\2\127\10\0"+
    "\7\127\21\0\1\211\25\0\4\34\7\0\6\34\4\0"+
    "\17\34\1\212\6\34\4\0\1\34\23\0\2\133\53\0"+
    "\1\213\25\0\4\34\7\0\6\34\4\0\20\34\1\214"+
    "\5\34\4\0\1\34\23\0\4\34\7\0\6\34\4\0"+
    "\4\34\1\215\6\34\1\216\12\34\4\0\1\34\23\0"+
    "\4\34\7\0\6\34\4\0\17\34\1\217\6\34\4\0"+
    "\1\34\23\0\4\34\7\0\6\34\4\0\20\34\1\220"+
    "\5\34\4\0\1\34\23\0\4\34\7\0\6\34\4\0"+
    "\11\34\1\221\14\34\4\0\1\34\23\0\4\34\7\0"+
    "\6\34\4\0\16\34\1\222\7\34\4\0\1\34\23\0"+
    "\4\34\7\0\6\34\4\0\13\34\1\223\12\34\4\0"+
    "\1\34\23\0\4\34\7\0\6\34\4\0\15\34\1\224"+
    "\10\34\4\0\1\34\23\0\4\34\7\0\6\34\4\0"+
    "\10\34\1\225\1\226\14\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\20\34\1\227\5\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\20\34\1\230\5\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\20\34"+
    "\1\231\5\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\11\34\1\232\14\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\5\34\1\233\20\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\10\34\1\234\15\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\3\34"+
    "\1\235\11\34\1\236\2\34\1\237\5\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\16\34\1\240\7\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\1\34"+
    "\1\241\17\34\1\242\3\34\1\243\4\0\1\34\23\0"+
    "\4\34\7\0\6\34\4\0\20\34\1\244\5\34\4\0"+
    "\1\34\23\0\4\34\7\0\6\34\4\0\16\34\1\245"+
    "\7\34\4\0\1\34\23\0\4\34\7\0\6\34\4\0"+
    "\10\34\1\246\15\34\4\0\1\34\23\0\4\34\7\0"+
    "\6\34\4\0\20\34\1\247\5\34\4\0\1\34\23\0"+
    "\4\164\7\0\2\164\10\0\7\164\21\0\1\250\34\0"+
    "\1\251\73\0\3\252\100\0\4\253\7\0\2\253\11\0"+
    "\6\253\17\0\1\254\27\0\4\255\7\0\2\255\11\0"+
    "\6\255\46\0\1\256\75\0\1\177\4\0\1\257\60\0"+
    "\2\200\1\0\2\200\1\0\75\200\2\201\1\76\2\200"+
    "\1\0\75\201\23\0\4\202\7\0\2\202\2\0\1\260"+
    "\5\0\1\261\6\202\6\0\1\260\40\0\2\203\23\0"+
    "\1\262\55\0\3\204\22\0\1\263\104\0\1\264\114\0"+
    "\1\265\41\0\4\34\7\0\6\34\4\0\20\34\1\266"+
    "\5\34\4\0\1\34\23\0\4\34\7\0\6\34\4\0"+
    "\3\34\1\267\22\34\4\0\1\34\23\0\4\34\7\0"+
    "\6\34\4\0\5\34\1\270\20\34\4\0\1\34\23\0"+
    "\4\34\7\0\6\34\4\0\17\34\1\271\1\272\5\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\5\34"+
    "\1\273\20\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\5\34\1\274\20\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\17\34\1\275\6\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\5\34\1\276\20\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\14\34"+
    "\1\277\11\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\20\34\1\300\5\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\10\34\1\301\15\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\1\34\1\302\24\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\10\34"+
    "\1\303\15\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\11\34\1\304\14\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\16\34\1\305\7\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\12\34\1\306\13\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\5\34"+
    "\1\307\20\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\5\34\1\310\20\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\21\34\1\311\4\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\21\34\1\312\4\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\10\34"+
    "\1\313\15\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\5\34\1\314\20\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\10\34\1\315\15\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\20\34\1\316\5\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\11\34"+
    "\1\317\14\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\7\34\1\320\16\34\4\0\1\34\23\0\3\167"+
    "\100\0\4\321\7\0\2\321\11\0\6\321\47\0\4\322"+
    "\7\0\2\322\11\0\6\322\47\0\4\167\7\0\2\167"+
    "\11\0\6\167\24\0\2\256\1\76\3\0\75\256\16\0"+
    "\1\323\1\0\1\323\2\0\4\324\77\0\4\202\7\0"+
    "\2\202\10\0\1\261\6\202\57\0\1\325\122\0\1\326"+
    "\52\0\4\34\7\0\6\34\4\0\16\34\1\327\7\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\7\34"+
    "\1\330\16\34\4\0\1\34\23\0\4\34\7\0\3\34"+
    "\1\331\2\34\4\0\26\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\20\34\1\332\5\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\16\34\1\333\7\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\13\34"+
    "\1\334\2\34\1\335\7\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\5\34\1\336\20\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\1\34\1\337\24\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\16\34"+
    "\1\340\7\34\4\0\1\34\23\0\4\34\7\0\3\34"+
    "\1\341\2\34\4\0\26\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\13\34\1\342\12\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\20\34\1\343\5\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\22\34"+
    "\1\344\3\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\16\34\1\345\7\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\10\34\1\346\15\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\10\34\1\347\15\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\1\34"+
    "\1\350\24\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\16\34\1\351\7\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\3\34\1\352\22\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\20\34\1\353\5\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\11\34"+
    "\1\354\14\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\21\34\1\355\4\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\5\34\1\356\20\34\4\0\1\34"+
    "\23\0\4\357\7\0\2\357\11\0\6\357\21\0\1\167"+
    "\25\0\4\324\77\0\4\324\21\0\1\360\55\0\4\34"+
    "\7\0\6\34\4\0\1\34\1\361\24\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\6\34\1\362\17\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\1\34"+
    "\1\363\24\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\4\34\1\364\21\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\13\34\1\365\12\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\3\34\1\366\22\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\20\34"+
    "\1\367\5\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\6\34\1\370\17\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\5\34\1\371\20\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\5\34\1\372\20\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\5\34"+
    "\1\373\20\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\10\34\1\374\15\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\20\34\1\375\5\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\22\34\1\376\3\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\20\34"+
    "\1\377\5\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\13\34\1\u0100\12\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\20\34\1\u0101\5\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\1\34\1\u0102\24\34"+
    "\4\0\1\34\23\0\4\u0103\7\0\2\u0103\11\0\6\u0103"+
    "\21\0\1\167\25\0\4\34\7\0\6\34\4\0\3\34"+
    "\1\u0104\22\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\3\34\1\u0105\22\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\17\34\1\u0106\6\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\1\34\1\u0107\24\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\7\34"+
    "\1\u0108\16\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\17\34\1\u0109\6\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\4\34\1\u010a\21\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\10\34\1\u010b\15\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\5\34"+
    "\1\u010c\20\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\11\34\1\u010d\14\34\4\0\1\34\23\0\4\u010e"+
    "\7\0\2\u010e\11\0\6\u010e\21\0\1\167\25\0\4\34"+
    "\7\0\6\34\4\0\20\34\1\u010f\5\34\4\0\1\34"+
    "\23\0\4\34\7\0\6\34\4\0\20\34\1\u0110\5\34"+
    "\4\0\1\34\23\0\4\34\7\0\6\34\4\0\11\34"+
    "\1\u0111\14\34\4\0\1\34\23\0\4\34\7\0\6\34"+
    "\4\0\5\34\1\u0112\20\34\4\0\1\34\23\0\4\34"+
    "\7\0\6\34\4\0\22\34\1\u0113\3\34\4\0\1\34"+
    "\23\0\4\u0114\7\0\2\u0114\11\0\6\u0114\21\0\1\167"+
    "\25\0\4\34\7\0\6\34\4\0\5\34\1\u0115\20\34"+
    "\4\0\1\34\23\0\4\u0116\7\0\2\u0116\11\0\6\u0116"+
    "\21\0\1\167\102\0\1\167\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13065];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\2\1\2\11\2\1\1\11"+
    "\1\1\1\11\3\1\2\11\3\1\2\11\2\1\2\11"+
    "\24\1\1\11\1\1\2\11\1\1\1\11\1\0\1\11"+
    "\2\1\2\0\3\11\1\1\5\11\2\1\1\11\4\0"+
    "\1\1\1\11\1\0\2\11\1\1\2\0\1\11\2\1"+
    "\1\0\30\1\1\0\1\11\1\1\1\11\3\1\2\11"+
    "\1\0\1\11\1\0\5\1\1\11\1\0\1\11\1\0"+
    "\1\11\1\1\1\11\34\1\2\11\4\0\1\1\1\11"+
    "\1\1\5\0\33\1\2\0\2\1\2\11\30\1\2\0"+
    "\22\1\1\0\12\1\1\0\5\1\1\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  private static final class State {
    final int state;

    public State(int state) {
        this.state = state;
    }

    @Override
    public String toString() {
        return "yystate = " + state;
    }
  }

  private final Stack<State> states = new Stack<State>();

  private int commentStart;
  private int commentDepth;

  private void pushState(int state) {
    states.push(new State(yystate()));
    yybegin(state);
  }

  private void popState() {
    State state = states.pop();
    yybegin(state.state);
  }

  public _TactLexer() {
    this((java.io.Reader)null);
 }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TactLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case MULTI_LINE_COMMENT_STATE: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return MULTI_LINE_COMMENT;
            }  // fall though
            case 279: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 107: break;
          case 2:
            { return WS;
            }
          // fall through
          case 108: break;
          case 3:
            { return NLS;
            }
          // fall through
          case 109: break;
          case 4:
            { return NOT;
            }
          // fall through
          case 110: break;
          case 5:
            { pushState(STRING); return OPEN_QUOTE;
            }
          // fall through
          case 111: break;
          case 6:
            { return REMAINDER;
            }
          // fall through
          case 112: break;
          case 7:
            { return BIT_AND;
            }
          // fall through
          case 113: break;
          case 8:
            { return LPAREN;
            }
          // fall through
          case 114: break;
          case 9:
            { return RPAREN;
            }
          // fall through
          case 115: break;
          case 10:
            { return MUL;
            }
          // fall through
          case 116: break;
          case 11:
            { return PLUS;
            }
          // fall through
          case 117: break;
          case 12:
            { return COMMA;
            }
          // fall through
          case 118: break;
          case 13:
            { return MINUS;
            }
          // fall through
          case 119: break;
          case 14:
            { return DOT;
            }
          // fall through
          case 120: break;
          case 15:
            { return QUOTIENT;
            }
          // fall through
          case 121: break;
          case 16:
            { return INT;
            }
          // fall through
          case 122: break;
          case 17:
            { return COLON;
            }
          // fall through
          case 123: break;
          case 18:
            { return SEMICOLON;
            }
          // fall through
          case 124: break;
          case 19:
            { return LESS;
            }
          // fall through
          case 125: break;
          case 20:
            { return ASSIGN;
            }
          // fall through
          case 126: break;
          case 21:
            { return GREATER;
            }
          // fall through
          case 127: break;
          case 22:
            { return QUESTION;
            }
          // fall through
          case 128: break;
          case 23:
            { return AT;
            }
          // fall through
          case 129: break;
          case 24:
            { return IDENTIFIER;
            }
          // fall through
          case 130: break;
          case 25:
            { return LBRACK;
            }
          // fall through
          case 131: break;
          case 26:
            { return RBRACK;
            }
          // fall through
          case 132: break;
          case 27:
            { return BIT_XOR;
            }
          // fall through
          case 133: break;
          case 28:
            { return LBRACE;
            }
          // fall through
          case 134: break;
          case 29:
            { return BIT_OR;
            }
          // fall through
          case 135: break;
          case 30:
            { return RBRACE;
            }
          // fall through
          case 136: break;
          case 31:
            { return BIT_NOT;
            }
          // fall through
          case 137: break;
          case 32:
            { return STRING_ENTRY;
            }
          // fall through
          case 138: break;
          case 33:
            { popState(); return CLOSING_QUOTE;
            }
          // fall through
          case 139: break;
          case 34:
            { 
            }
          // fall through
          case 140: break;
          case 35:
            { return ASSERT_OP;
            }
          // fall through
          case 141: break;
          case 36:
            { return NOT_EQ;
            }
          // fall through
          case 142: break;
          case 37:
            { return REMAINDER_ASSIGN;
            }
          // fall through
          case 143: break;
          case 38:
            { return COND_AND;
            }
          // fall through
          case 144: break;
          case 39:
            { return BIT_AND_ASSIGN;
            }
          // fall through
          case 145: break;
          case 40:
            { return MUL_ASSIGN;
            }
          // fall through
          case 146: break;
          case 41:
            { return PLUS_ASSIGN;
            }
          // fall through
          case 147: break;
          case 42:
            { return MINUS_ASSIGN;
            }
          // fall through
          case 148: break;
          case 43:
            { return ARROW;
            }
          // fall through
          case 149: break;
          case 44:
            { pushState(MULTI_LINE_COMMENT_STATE);
    commentDepth = 0;
    commentStart = getTokenStart();
            }
          // fall through
          case 150: break;
          case 45:
            { return LINE_COMMENT;
            }
          // fall through
          case 151: break;
          case 46:
            { return QUOTIENT_ASSIGN;
            }
          // fall through
          case 152: break;
          case 47:
            { return SHIFT_LEFT;
            }
          // fall through
          case 153: break;
          case 48:
            { return LESS_OR_EQUAL;
            }
          // fall through
          case 154: break;
          case 49:
            { return EQ;
            }
          // fall through
          case 155: break;
          case 50:
            { return GREATER_OR_EQUAL;
            }
          // fall through
          case 156: break;
          case 51:
            { return SHIFT_RIGHT;
            }
          // fall through
          case 157: break;
          case 52:
            { return BIT_XOR_ASSIGN;
            }
          // fall through
          case 158: break;
          case 53:
            { return AS;
            }
          // fall through
          case 159: break;
          case 54:
            { return DO;
            }
          // fall through
          case 160: break;
          case 55:
            { return IF;
            }
          // fall through
          case 161: break;
          case 56:
            { return IN;
            }
          // fall through
          case 162: break;
          case 57:
            { return BIT_OR_ASSIGN;
            }
          // fall through
          case 163: break;
          case 58:
            { return COND_OR;
            }
          // fall through
          case 164: break;
          case 59:
            { return STRING_ESCAPE_ENTRY;
            }
          // fall through
          case 165: break;
          case 60:
            { if (commentDepth > 0) {
            commentDepth--;
        } else {
             int state = yystate();
             popState();
             zzStartRead = commentStart;
             return MULTI_LINE_COMMENT;
        }
            }
          // fall through
          case 166: break;
          case 61:
            { commentDepth++;
            }
          // fall through
          case 167: break;
          case 62:
            { return AND_ASSIGN;
            }
          // fall through
          case 168: break;
          case 63:
            { return DOC_COMMENT;
            }
          // fall through
          case 169: break;
          case 64:
            { return HEX;
            }
          // fall through
          case 170: break;
          case 65:
            { return BIN;
            }
          // fall through
          case 171: break;
          case 66:
            { return OCT;
            }
          // fall through
          case 172: break;
          case 67:
            { return SHIFT_LEFT_ASSIGN;
            }
          // fall through
          case 173: break;
          case 68:
            { return SHIFT_RIGHT_ASSIGN;
            }
          // fall through
          case 174: break;
          case 69:
            { return BOC_LITERAL;
            }
          // fall through
          case 175: break;
          case 70:
            { return BIN_LITERAL;
            }
          // fall through
          case 176: break;
          case 71:
            { return FUN;
            }
          // fall through
          case 177: break;
          case 72:
            { return LET;
            }
          // fall through
          case 178: break;
          case 73:
            { return TRY;
            }
          // fall through
          case 179: break;
          case 74:
            { return HEX_LITERAL;
            }
          // fall through
          case 180: break;
          case 75:
            { return OR_ASSIGN;
            }
          // fall through
          case 181: break;
          case 76:
            { return MULTI_LINE_COMMENT;
            }
          // fall through
          case 182: break;
          case 77:
            { return ELSE;
            }
          // fall through
          case 183: break;
          case 78:
            { return NULL;
            }
          // fall through
          case 184: break;
          case 79:
            { return TRUE;
            }
          // fall through
          case 185: break;
          case 80:
            { return WITH;
            }
          // fall through
          case 186: break;
          case 81:
            { return EMPTY_BOC_LITERAL;
            }
          // fall through
          case 187: break;
          case 82:
            { return TO_BOC_FIFT;
            }
          // fall through
          case 188: break;
          case 83:
            { return CATCH;
            }
          // fall through
          case 189: break;
          case 84:
            { return CONST;
            }
          // fall through
          case 190: break;
          case 85:
            { return FALSE;
            }
          // fall through
          case 191: break;
          case 86:
            { return TRAIT;
            }
          // fall through
          case 192: break;
          case 87:
            { return UNTIL;
            }
          // fall through
          case 193: break;
          case 88:
            { return WHILE;
            }
          // fall through
          case 194: break;
          case 89:
            { return CODE_OF;
            }
          // fall through
          case 195: break;
          case 90:
            { return IMPORT;
            }
          // fall through
          case 196: break;
          case 91:
            { return INIT_OF;
            }
          // fall through
          case 197: break;
          case 92:
            { return INLINE;
            }
          // fall through
          case 198: break;
          case 93:
            { return NATIVE;
            }
          // fall through
          case 199: break;
          case 94:
            { return REPEAT;
            }
          // fall through
          case 200: break;
          case 95:
            { return RETURN;
            }
          // fall through
          case 201: break;
          case 96:
            { return STRUCT;
            }
          // fall through
          case 202: break;
          case 97:
            { return EXTENDS;
            }
          // fall through
          case 203: break;
          case 98:
            { return FOREACH;
            }
          // fall through
          case 204: break;
          case 99:
            { return MUTATES;
            }
          // fall through
          case 205: break;
          case 100:
            { return RECEIVE;
            }
          // fall through
          case 206: break;
          case 101:
            { return VIRTUAL;
            }
          // fall through
          case 207: break;
          case 102:
            { return ABSTRACT;
            }
          // fall through
          case 208: break;
          case 103:
            { return CONTRACT;
            }
          // fall through
          case 209: break;
          case 104:
            { return EXTERNAL;
            }
          // fall through
          case 210: break;
          case 105:
            { return OVERRIDE;
            }
          // fall through
          case 211: break;
          case 106:
            { return PRIMITIVE;
            }
          // fall through
          case 212: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
