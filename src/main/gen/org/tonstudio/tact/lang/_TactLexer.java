// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: tact.flex

package org.tonstudio.tact.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static org.tonstudio.tact.lang.psi.TactTokenTypes.*;


public class _TactLexer implements FlexLexer, TactTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int MULTI_LINE_COMMENT_STATE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u1f00\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u0100\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u1f00\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
    "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
    "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
    "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
    "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\27\u1f00\1\u5e00\1\u5f00"+
    "\1\u6000\1\u6100\11\u1f00\1\u6200\1\u6300\5\u1f00\1\u6400\1\u6500"+
    "\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100\1\u6800\1\u6900"+
    "\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100\1\u6c00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\2\0\1\10\1\11\1\0\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\6\24\2\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\6\35\10\36\1\37\1\40\7\36\1\41\2\36"+
    "\1\42\1\43\1\44\1\45\1\46\1\0\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\36\1\55\1\56\2\36"+
    "\1\57\1\60\1\61\1\62\1\63\1\36\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\36\1\74"+
    "\1\75\1\76\1\77\6\0\1\3\44\0\1\36\12\0"+
    "\1\36\4\0\1\36\5\0\27\36\1\0\37\36\1\0"+
    "\u01ca\36\4\0\14\36\16\0\5\36\7\0\1\36\1\0"+
    "\1\36\201\0\5\36\1\0\2\36\2\0\4\36\1\0"+
    "\1\36\6\0\1\36\1\0\3\36\1\0\1\36\1\0"+
    "\24\36\1\0\123\36\1\0\213\36\10\0\246\36\1\0"+
    "\46\36\2\0\1\36\6\0\51\36\107\0\33\36\4\0"+
    "\4\36\55\0\53\36\25\0\12\100\4\0\2\36\1\0"+
    "\143\36\1\0\1\36\17\0\2\36\7\0\2\36\12\100"+
    "\3\36\2\0\1\36\20\0\1\36\1\0\36\36\35\0"+
    "\131\36\13\0\1\36\16\0\12\100\41\36\11\0\2\36"+
    "\4\0\1\36\5\0\26\36\4\0\1\36\11\0\1\36"+
    "\3\0\1\36\27\0\31\36\7\0\13\36\65\0\25\36"+
    "\1\0\10\36\106\0\66\36\3\0\1\36\22\0\1\36"+
    "\7\0\12\36\4\0\12\100\1\0\20\36\4\0\10\36"+
    "\2\0\2\36\2\0\26\36\1\0\7\36\1\0\1\36"+
    "\3\0\4\36\3\0\1\36\20\0\1\36\15\0\2\36"+
    "\1\0\3\36\4\0\12\100\2\36\12\0\1\36\10\0"+
    "\6\36\4\0\2\36\2\0\26\36\1\0\7\36\1\0"+
    "\2\36\1\0\2\36\1\0\2\36\37\0\4\36\1\0"+
    "\1\36\7\0\12\100\2\0\3\36\20\0\11\36\1\0"+
    "\3\36\1\0\26\36\1\0\7\36\1\0\2\36\1\0"+
    "\5\36\3\0\1\36\22\0\1\36\17\0\2\36\4\0"+
    "\12\100\11\0\1\36\13\0\10\36\2\0\2\36\2\0"+
    "\26\36\1\0\7\36\1\0\2\36\1\0\5\36\3\0"+
    "\1\36\36\0\2\36\1\0\3\36\4\0\12\100\1\0"+
    "\1\36\21\0\1\36\1\0\6\36\3\0\3\36\1\0"+
    "\4\36\3\0\2\36\1\0\1\36\1\0\2\36\3\0"+
    "\2\36\3\0\3\36\3\0\14\36\26\0\1\36\25\0"+
    "\12\100\25\0\10\36\1\0\3\36\1\0\27\36\1\0"+
    "\20\36\3\0\1\36\32\0\3\36\5\0\2\36\4\0"+
    "\12\100\20\0\1\36\4\0\10\36\1\0\3\36\1\0"+
    "\27\36\1\0\12\36\1\0\5\36\3\0\1\36\40\0"+
    "\1\36\1\0\2\36\4\0\12\100\1\0\2\36\22\0"+
    "\10\36\1\0\3\36\1\0\51\36\2\0\1\36\20\0"+
    "\1\36\5\0\3\36\10\0\3\36\4\0\12\100\12\0"+
    "\6\36\5\0\22\36\3\0\30\36\1\0\11\36\1\0"+
    "\1\36\2\0\7\36\37\0\12\100\21\0\60\36\1\0"+
    "\2\36\14\0\7\36\11\0\12\100\47\0\2\36\1\0"+
    "\1\36\1\0\5\36\1\0\30\36\1\0\1\36\1\0"+
    "\12\36\1\0\2\36\11\0\1\36\2\0\5\36\1\0"+
    "\1\36\11\0\12\100\2\0\4\36\40\0\1\36\37\0"+
    "\12\100\26\0\10\36\1\0\44\36\33\0\5\36\163\0"+
    "\53\36\24\0\1\36\12\100\6\0\6\36\4\0\4\36"+
    "\3\0\1\36\3\0\2\36\7\0\3\36\4\0\15\36"+
    "\14\0\1\36\1\0\12\100\6\0\46\36\1\0\1\36"+
    "\5\0\1\36\2\0\53\36\1\0\115\36\1\0\4\36"+
    "\2\0\7\36\1\0\1\36\1\0\4\36\2\0\51\36"+
    "\1\0\4\36\2\0\41\36\1\0\4\36\2\0\7\36"+
    "\1\0\1\36\1\0\4\36\2\0\17\36\1\0\71\36"+
    "\1\0\4\36\2\0\103\36\45\0\20\36\20\0\126\36"+
    "\2\0\6\36\3\0\u016c\36\2\0\21\36\1\0\32\36"+
    "\5\0\113\36\6\0\10\36\7\0\15\36\1\0\4\36"+
    "\16\0\22\36\16\0\22\36\16\0\15\36\1\0\3\36"+
    "\17\0\64\36\43\0\1\36\4\0\1\36\3\0\12\100"+
    "\46\0\12\100\6\0\131\36\7\0\5\36\2\0\42\36"+
    "\1\0\1\36\5\0\106\36\12\0\37\36\47\0\12\100"+
    "\36\36\2\0\5\36\13\0\54\36\4\0\32\36\6\0"+
    "\12\100\46\0\27\36\11\0\65\36\53\0\12\100\6\0"+
    "\12\100\15\0\1\36\135\0\57\36\21\0\7\36\4\0"+
    "\12\100\51\0\36\36\15\0\2\36\12\100\54\36\32\0"+
    "\44\36\34\0\12\100\3\0\3\36\12\100\44\36\2\0"+
    "\11\36\7\0\53\36\2\0\3\36\51\0\4\36\1\0"+
    "\6\36\1\0\2\36\3\0\1\36\5\0\300\36\100\0"+
    "\26\36\2\0\6\36\2\0\46\36\2\0\6\36\2\0"+
    "\10\36\1\0\1\36\1\0\1\36\1\0\1\36\1\0"+
    "\37\36\2\0\65\36\1\0\7\36\1\0\1\36\3\0"+
    "\3\36\1\0\7\36\3\0\4\36\2\0\6\36\4\0"+
    "\15\36\5\0\3\36\1\0\7\36\53\0\2\3\107\0"+
    "\1\36\15\0\1\36\20\0\15\36\145\0\1\36\4\0"+
    "\1\36\2\0\12\36\1\0\1\36\3\0\5\36\6\0"+
    "\1\36\1\0\1\36\1\0\1\36\1\0\4\36\1\0"+
    "\13\36\2\0\4\36\5\0\5\36\4\0\1\36\64\0"+
    "\2\36\u017b\0\57\36\1\0\57\36\1\0\205\36\6\0"+
    "\4\36\3\0\2\36\14\0\46\36\1\0\1\36\5\0"+
    "\1\36\2\0\70\36\7\0\1\36\20\0\27\36\11\0"+
    "\7\36\1\0\7\36\1\0\7\36\1\0\7\36\1\0"+
    "\7\36\1\0\7\36\1\0\7\36\1\0\7\36\120\0"+
    "\1\36\325\0\2\36\52\0\5\36\5\0\2\36\4\0"+
    "\126\36\6\0\3\36\1\0\132\36\1\0\4\36\5\0"+
    "\53\36\1\0\136\36\21\0\33\36\65\0\306\36\112\0"+
    "\360\36\20\0\215\36\103\0\56\36\2\0\15\36\3\0"+
    "\20\36\12\100\2\36\24\0\57\36\20\0\37\36\2\0"+
    "\106\36\61\0\11\36\2\0\147\36\2\0\65\36\2\0"+
    "\5\36\60\0\13\36\1\0\3\36\1\0\4\36\1\0"+
    "\27\36\35\0\64\36\16\0\62\36\34\0\12\100\30\0"+
    "\6\36\3\0\1\36\1\0\2\36\1\0\12\100\34\36"+
    "\12\0\27\36\31\0\35\36\7\0\57\36\34\0\1\36"+
    "\12\100\6\0\5\36\1\0\12\36\12\100\5\36\1\0"+
    "\51\36\27\0\3\36\1\0\10\36\4\0\12\100\6\0"+
    "\27\36\3\0\1\36\3\0\62\36\1\0\1\36\3\0"+
    "\2\36\2\0\5\36\2\0\1\36\1\0\1\36\30\0"+
    "\3\36\2\0\13\36\7\0\3\36\14\0\6\36\2\0"+
    "\6\36\2\0\6\36\11\0\7\36\1\0\7\36\1\0"+
    "\53\36\1\0\14\36\10\0\163\36\15\0\12\100\6\0"+
    "\244\36\14\0\27\36\4\0\61\36\4\0\u0100\3\156\36"+
    "\2\0\152\36\46\0\7\36\14\0\5\36\5\0\1\36"+
    "\1\0\12\36\1\0\15\36\1\0\5\36\1\0\1\36"+
    "\1\0\2\36\1\0\2\36\1\0\154\36\41\0\153\36"+
    "\22\0\100\36\2\0\66\36\50\0\14\36\164\0\5\36"+
    "\1\0\207\36\23\0\12\100\7\0\32\36\6\0\32\36"+
    "\13\0\131\36\3\0\6\36\2\0\6\36\2\0\6\36"+
    "\2\0\3\36\43\0\14\36\1\0\32\36\1\0\23\36"+
    "\1\0\2\36\1\0\17\36\2\0\16\36\42\0\173\36"+
    "\205\0\35\36\3\0\61\36\57\0\40\36\15\0\24\36"+
    "\1\0\10\36\6\0\46\36\12\0\36\36\2\0\44\36"+
    "\4\0\10\36\60\0\236\36\2\0\12\100\6\0\44\36"+
    "\4\0\44\36\4\0\50\36\10\0\64\36\234\0\67\36"+
    "\11\0\26\36\12\0\10\36\230\0\6\36\2\0\1\36"+
    "\1\0\54\36\1\0\2\36\3\0\1\36\2\0\27\36"+
    "\12\0\27\36\11\0\37\36\101\0\23\36\1\0\2\36"+
    "\12\0\26\36\12\0\32\36\106\0\70\36\6\0\2\36"+
    "\100\0\1\36\17\0\4\36\1\0\3\36\1\0\35\36"+
    "\52\0\35\36\3\0\35\36\43\0\10\36\1\0\34\36"+
    "\33\0\66\36\12\0\26\36\12\0\23\36\15\0\22\36"+
    "\156\0\111\36\67\0\63\36\15\0\63\36\15\0\44\36"+
    "\14\0\12\100\306\0\35\36\12\0\1\36\10\0\26\36"+
    "\232\0\27\36\14\0\65\36\56\0\12\100\23\0\55\36"+
    "\40\0\31\36\7\0\12\100\11\0\44\36\17\0\12\100"+
    "\4\0\1\36\13\0\43\36\3\0\1\36\14\0\60\36"+
    "\16\0\4\36\13\0\12\100\1\36\1\0\1\36\43\0"+
    "\22\36\1\0\31\36\124\0\7\36\1\0\1\36\1\0"+
    "\4\36\1\0\17\36\1\0\12\36\7\0\57\36\21\0"+
    "\12\100\13\0\10\36\2\0\2\36\2\0\26\36\1\0"+
    "\7\36\1\0\2\36\1\0\5\36\3\0\1\36\22\0"+
    "\1\36\14\0\5\36\236\0\65\36\22\0\4\36\5\0"+
    "\12\100\5\0\1\36\40\0\60\36\24\0\2\36\1\0"+
    "\1\36\10\0\12\100\246\0\57\36\51\0\4\36\44\0"+
    "\60\36\24\0\1\36\13\0\12\100\46\0\53\36\15\0"+
    "\1\36\7\0\12\100\66\0\33\36\25\0\12\100\306\0"+
    "\54\36\164\0\100\36\12\100\25\0\1\36\240\0\10\36"+
    "\2\0\47\36\20\0\1\36\1\0\1\36\34\0\1\36"+
    "\12\0\50\36\7\0\1\36\25\0\1\36\13\0\56\36"+
    "\23\0\1\36\42\0\71\36\7\0\11\36\1\0\45\36"+
    "\21\0\1\36\17\0\12\100\30\0\36\36\160\0\7\36"+
    "\1\0\2\36\1\0\46\36\25\0\1\36\11\0\12\100"+
    "\6\0\6\36\1\0\2\36\1\0\40\36\16\0\1\36"+
    "\7\0\12\100\u0136\0\23\36\15\0\232\36\346\0\304\36"+
    "\274\0\57\36\321\0\107\36\271\0\71\36\7\0\37\36"+
    "\1\0\12\100\146\0\36\36\22\0\60\36\20\0\4\36"+
    "\14\0\12\100\11\0\25\36\5\0\23\36\260\0\100\36"+
    "\200\0\113\36\5\0\1\36\102\0\15\36\100\0\2\36"+
    "\1\0\1\36\34\0\370\36\10\0\363\36\15\0\37\36"+
    "\61\0\3\36\21\0\4\36\10\0\u018c\36\4\0\153\36"+
    "\5\0\15\36\3\0\11\36\7\0\12\36\146\0\125\36"+
    "\1\0\107\36\1\0\2\36\2\0\1\36\2\0\2\36"+
    "\2\0\4\36\1\0\14\36\1\0\1\36\1\0\7\36"+
    "\1\0\101\36\1\0\4\36\2\0\10\36\1\0\7\36"+
    "\1\0\34\36\1\0\4\36\1\0\5\36\1\0\1\36"+
    "\3\0\7\36\1\0\u0154\36\2\0\31\36\1\0\31\36"+
    "\1\0\37\36\1\0\31\36\1\0\37\36\1\0\31\36"+
    "\1\0\37\36\1\0\31\36\1\0\37\36\1\0\31\36"+
    "\1\0\10\36\2\0\62\100\55\36\12\0\7\36\2\0"+
    "\12\100\4\0\1\36\u0171\0\54\36\4\0\12\100\6\0"+
    "\305\36\73\0\104\36\7\0\1\36\4\0\12\100\246\0"+
    "\4\36\1\0\33\36\1\0\2\36\1\0\1\36\2\0"+
    "\1\36\1\0\12\36\1\0\4\36\1\0\1\36\1\0"+
    "\1\36\6\0\1\36\4\0\1\36\1\0\1\36\1\0"+
    "\1\36\1\0\3\36\1\0\2\36\1\0\1\36\2\0"+
    "\1\36\1\0\1\36\1\0\1\36\1\0\1\36\1\0"+
    "\1\36\1\0\2\36\1\0\1\36\2\0\4\36\1\0"+
    "\7\36\1\0\4\36\1\0\4\36\1\0\1\36\1\0"+
    "\12\36\1\0\21\36\5\0\3\36\1\0\5\36\1\0"+
    "\21\36\104\0\327\36\51\0\65\36\13\0\336\36\2\0"+
    "\u0182\36\16\0\u0131\36\37\0\36\36\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\2\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\23\30\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\0\3\42\2\0\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\4\0\1\57\1\60\1\61\1\62\1\63"+
    "\1\30\1\64\1\0\2\30\1\65\5\30\1\66\1\30"+
    "\1\67\15\30\1\0\1\70\1\71\4\72\1\73\1\74"+
    "\1\55\1\75\1\0\1\55\1\76\1\77\1\100\1\101"+
    "\1\102\1\30\1\103\7\30\1\104\3\30\1\105\13\30"+
    "\1\106\4\30\1\107\1\110\3\0\1\111\1\76\3\0"+
    "\5\30\1\112\10\30\1\113\7\30\1\114\3\30\1\115"+
    "\1\0\2\76\1\30\1\116\1\30\1\117\3\30\1\120"+
    "\14\30\1\121\1\122\1\30\1\123\1\0\1\30\1\124"+
    "\4\30\1\125\1\126\1\127\1\30\1\130\3\30\1\131"+
    "\1\132\1\133\3\30\1\134\1\30\1\135\1\136\2\30"+
    "\1\137\1\140\1\141\1\142\1\143\1\144\1\30\1\145";

  private static int [] zzUnpackAction() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\303"+
    "\0\u01c7\0\u0208\0\303\0\303\0\u0249\0\u028a\0\303\0\u02cb"+
    "\0\303\0\u030c\0\u034d\0\u038e\0\303\0\303\0\u03cf\0\u0410"+
    "\0\u0451\0\303\0\303\0\u0492\0\303\0\303\0\303\0\u04d3"+
    "\0\u0514\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db"+
    "\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3"+
    "\0\u0924\0\u0965\0\303\0\u09a6\0\303\0\303\0\u09e7\0\303"+
    "\0\u0a28\0\303\0\u0a69\0\u0aaa\0\u0104\0\u0aeb\0\303\0\303"+
    "\0\303\0\u0b2c\0\303\0\303\0\303\0\303\0\303\0\u0b6d"+
    "\0\u0bae\0\303\0\u0bef\0\u038e\0\u0c30\0\u0c71\0\u0cb2\0\303"+
    "\0\303\0\303\0\u0cf3\0\u0d34\0\u0492\0\u0d75\0\u0db6\0\u0df7"+
    "\0\u0492\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0492\0\u0f7d"+
    "\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185"+
    "\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\303"+
    "\0\u138d\0\303\0\u13ce\0\u140f\0\u1450\0\303\0\303\0\u1491"+
    "\0\303\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\303\0\303"+
    "\0\u1617\0\303\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d"+
    "\0\u17de\0\u0492\0\u181f\0\u1860\0\u18a1\0\u0492\0\u18e2\0\u1923"+
    "\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b"+
    "\0\u1b6c\0\u0492\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\303\0\303"+
    "\0\u1cb1\0\u1cf2\0\u1d33\0\303\0\u1d74\0\u1db5\0\u1595\0\u15d6"+
    "\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa\0\u0492\0\u1f3b\0\u1f7c"+
    "\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102\0\u0492\0\u2143"+
    "\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9\0\u0492\0\u230a"+
    "\0\u234b\0\u238c\0\u0492\0\u1450\0\u23cd\0\u240e\0\u244f\0\u0492"+
    "\0\u2490\0\u0492\0\u24d1\0\u2512\0\u2553\0\u0492\0\u2594\0\u25d5"+
    "\0\u2616\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd"+
    "\0\u281e\0\u285f\0\u0492\0\u0492\0\u28a0\0\u0492\0\u240e\0\u28e1"+
    "\0\u0492\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u0492\0\u0492\0\u0492"+
    "\0\u2a26\0\u0492\0\u2a67\0\u2aa8\0\u2ae9\0\u0492\0\u0492\0\u0492"+
    "\0\u2b2a\0\u2b6b\0\u2bac\0\u0492\0\u2bed\0\u0492\0\u0492\0\u2c2e"+
    "\0\u2c6f\0\u0492\0\u0492\0\u0492\0\u0492\0\u0492\0\u0492\0\u2cb0"+
    "\0\u0492";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\5\1\4\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\3\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\5\34\1\35\1\4\1\36\1\37"+
    "\1\34\1\40\1\41\1\42\1\43\1\44\1\45\1\34"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\34\1\63\1\64"+
    "\1\65\1\66\1\4\7\67\1\70\33\67\1\71\35\67"+
    "\14\72\1\73\4\72\1\74\57\72\102\0\1\75\2\0"+
    "\1\75\14\0\1\76\61\0\1\6\104\0\1\77\22\0"+
    "\1\100\100\0\1\101\60\0\1\102\17\0\1\103\100\0"+
    "\1\104\100\0\1\105\100\0\1\106\1\107\62\0\1\110"+
    "\4\0\1\111\7\0\1\112\71\0\4\24\13\0\1\113"+
    "\4\0\1\114\1\0\1\115\11\0\1\116\7\0\1\113"+
    "\30\0\4\24\20\0\1\114\62\0\1\117\1\120\100\0"+
    "\1\121\100\0\1\122\1\123\70\0\4\34\7\0\5\34"+
    "\4\0\26\34\4\0\1\34\22\0\4\34\7\0\5\34"+
    "\4\0\2\34\1\124\14\34\1\125\6\34\4\0\1\34"+
    "\22\0\4\34\7\0\5\34\4\0\26\34\1\126\3\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\1\34\1\127"+
    "\12\34\1\130\11\34\4\0\1\34\22\0\4\34\7\0"+
    "\5\34\4\0\14\34\1\131\11\34\4\0\1\34\22\0"+
    "\4\34\7\0\5\34\4\0\11\34\1\132\12\34\1\133"+
    "\1\34\4\0\1\34\22\0\4\34\7\0\5\34\4\0"+
    "\1\34\1\134\12\34\1\135\4\34\1\136\4\34\4\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\6\34\1\137"+
    "\3\34\1\140\1\141\12\34\4\0\1\34\22\0\4\34"+
    "\7\0\5\34\4\0\5\34\1\142\20\34\4\0\1\34"+
    "\22\0\4\34\7\0\5\34\4\0\21\34\1\143\4\34"+
    "\4\0\1\34\22\0\4\34\7\0\5\34\4\0\1\34"+
    "\1\144\17\34\1\145\4\34\4\0\1\34\22\0\4\34"+
    "\7\0\5\34\4\0\22\34\1\146\3\34\4\0\1\34"+
    "\22\0\4\34\7\0\5\34\4\0\16\34\1\147\7\34"+
    "\4\0\1\34\22\0\4\34\7\0\5\34\4\0\5\34"+
    "\1\150\20\34\4\0\1\34\22\0\4\34\7\0\5\34"+
    "\4\0\20\34\1\151\5\34\4\0\1\34\22\0\4\34"+
    "\7\0\5\34\4\0\16\34\1\152\7\34\4\0\1\34"+
    "\22\0\4\34\7\0\5\34\4\0\13\34\1\153\12\34"+
    "\4\0\1\34\22\0\4\34\7\0\5\34\4\0\10\34"+
    "\1\154\15\34\4\0\1\34\22\0\4\34\7\0\5\34"+
    "\4\0\7\34\1\155\1\156\15\34\4\0\1\34\22\0"+
    "\4\34\7\0\5\34\4\0\26\34\1\157\3\0\1\34"+
    "\31\0\1\160\43\0\1\161\3\0\7\67\1\0\33\67"+
    "\1\0\35\67\2\162\4\0\14\162\3\163\42\162\1\164"+
    "\2\162\1\165\6\162\21\0\1\166\73\0\1\167\105\0"+
    "\1\170\110\0\1\171\63\0\1\172\64\0\2\111\1\75"+
    "\2\173\1\0\73\111\22\0\4\174\7\0\1\174\11\0"+
    "\6\174\46\0\2\175\77\0\3\176\105\0\1\177\100\0"+
    "\1\200\71\0\4\34\7\0\5\34\4\0\17\34\1\201"+
    "\6\34\4\0\1\34\22\0\2\126\52\0\1\202\24\0"+
    "\4\34\7\0\5\34\4\0\20\34\1\203\5\34\4\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\4\34\1\204"+
    "\6\34\1\205\12\34\4\0\1\34\22\0\4\34\7\0"+
    "\5\34\4\0\17\34\1\206\6\34\4\0\1\34\22\0"+
    "\4\34\7\0\5\34\4\0\20\34\1\207\5\34\4\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\11\34\1\210"+
    "\14\34\4\0\1\34\22\0\4\34\7\0\5\34\4\0"+
    "\16\34\1\211\7\34\4\0\1\34\22\0\4\34\7\0"+
    "\5\34\4\0\13\34\1\212\12\34\4\0\1\34\22\0"+
    "\4\34\7\0\5\34\4\0\15\34\1\213\10\34\4\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\10\34\1\214"+
    "\1\215\14\34\4\0\1\34\22\0\4\34\7\0\5\34"+
    "\4\0\20\34\1\216\5\34\4\0\1\34\22\0\4\34"+
    "\7\0\5\34\4\0\20\34\1\217\5\34\4\0\1\34"+
    "\22\0\4\34\7\0\5\34\4\0\20\34\1\220\5\34"+
    "\4\0\1\34\22\0\4\34\7\0\5\34\4\0\11\34"+
    "\1\221\14\34\4\0\1\34\22\0\4\34\7\0\5\34"+
    "\4\0\5\34\1\222\20\34\4\0\1\34\22\0\4\34"+
    "\7\0\5\34\4\0\10\34\1\223\15\34\4\0\1\34"+
    "\22\0\4\34\7\0\5\34\4\0\3\34\1\224\11\34"+
    "\1\225\2\34\1\226\5\34\4\0\1\34\22\0\4\34"+
    "\7\0\5\34\4\0\16\34\1\227\7\34\4\0\1\34"+
    "\22\0\4\34\7\0\5\34\4\0\1\34\1\230\17\34"+
    "\1\231\3\34\1\232\4\0\1\34\22\0\4\34\7\0"+
    "\5\34\4\0\20\34\1\233\5\34\4\0\1\34\22\0"+
    "\4\34\7\0\5\34\4\0\16\34\1\234\7\34\4\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\10\34\1\235"+
    "\15\34\4\0\1\34\22\0\4\34\7\0\5\34\4\0"+
    "\20\34\1\236\5\34\4\0\1\34\22\0\4\157\7\0"+
    "\1\157\11\0\6\157\21\0\1\237\33\0\1\240\71\0"+
    "\3\241\76\0\4\242\7\0\1\242\11\0\6\242\46\0"+
    "\4\243\7\0\1\243\11\0\6\243\24\0\2\170\1\75"+
    "\3\0\73\170\14\0\1\172\4\0\1\244\57\0\2\173"+
    "\1\0\2\173\1\0\73\173\22\0\4\174\7\0\1\174"+
    "\2\0\1\245\5\0\1\246\6\174\6\0\1\245\37\0"+
    "\2\175\22\0\1\247\54\0\3\176\21\0\1\250\54\0"+
    "\4\34\7\0\5\34\4\0\20\34\1\251\5\34\4\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\3\34\1\252"+
    "\22\34\4\0\1\34\22\0\4\34\7\0\5\34\4\0"+
    "\5\34\1\253\20\34\4\0\1\34\22\0\4\34\7\0"+
    "\5\34\4\0\17\34\1\254\1\255\5\34\4\0\1\34"+
    "\22\0\4\34\7\0\5\34\4\0\5\34\1\256\20\34"+
    "\4\0\1\34\22\0\4\34\7\0\5\34\4\0\5\34"+
    "\1\257\20\34\4\0\1\34\22\0\4\34\7\0\5\34"+
    "\4\0\17\34\1\260\6\34\4\0\1\34\22\0\4\34"+
    "\7\0\5\34\4\0\5\34\1\261\20\34\4\0\1\34"+
    "\22\0\4\34\7\0\5\34\4\0\14\34\1\262\11\34"+
    "\4\0\1\34\22\0\4\34\7\0\5\34\4\0\20\34"+
    "\1\263\5\34\4\0\1\34\22\0\4\34\7\0\5\34"+
    "\4\0\10\34\1\264\15\34\4\0\1\34\22\0\4\34"+
    "\7\0\5\34\4\0\1\34\1\265\24\34\4\0\1\34"+
    "\22\0\4\34\7\0\5\34\4\0\10\34\1\266\15\34"+
    "\4\0\1\34\22\0\4\34\7\0\5\34\4\0\11\34"+
    "\1\267\14\34\4\0\1\34\22\0\4\34\7\0\5\34"+
    "\4\0\16\34\1\270\7\34\4\0\1\34\22\0\4\34"+
    "\7\0\5\34\4\0\12\34\1\271\13\34\4\0\1\34"+
    "\22\0\4\34\7\0\5\34\4\0\5\34\1\272\20\34"+
    "\4\0\1\34\22\0\4\34\7\0\5\34\4\0\5\34"+
    "\1\273\20\34\4\0\1\34\22\0\4\34\7\0\5\34"+
    "\4\0\21\34\1\274\4\34\4\0\1\34\22\0\4\34"+
    "\7\0\5\34\4\0\21\34\1\275\4\34\4\0\1\34"+
    "\22\0\4\34\7\0\5\34\4\0\10\34\1\276\15\34"+
    "\4\0\1\34\22\0\4\34\7\0\5\34\4\0\5\34"+
    "\1\277\20\34\4\0\1\34\22\0\4\34\7\0\5\34"+
    "\4\0\10\34\1\300\15\34\4\0\1\34\22\0\4\34"+
    "\7\0\5\34\4\0\20\34\1\301\5\34\4\0\1\34"+
    "\22\0\4\34\7\0\5\34\4\0\11\34\1\302\14\34"+
    "\4\0\1\34\22\0\4\34\7\0\5\34\4\0\7\34"+
    "\1\303\16\34\4\0\1\34\22\0\3\162\76\0\4\304"+
    "\7\0\1\304\11\0\6\304\46\0\4\162\7\0\1\162"+
    "\11\0\6\162\41\0\1\305\1\0\1\305\2\0\4\306"+
    "\75\0\4\174\7\0\1\174\10\0\1\246\6\174\46\0"+
    "\4\34\7\0\5\34\4\0\16\34\1\307\7\34\4\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\7\34\1\310"+
    "\16\34\4\0\1\34\22\0\4\34\7\0\2\34\1\311"+
    "\2\34\4\0\26\34\4\0\1\34\22\0\4\34\7\0"+
    "\5\34\4\0\20\34\1\312\5\34\4\0\1\34\22\0"+
    "\4\34\7\0\5\34\4\0\16\34\1\313\7\34\4\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\13\34\1\314"+
    "\2\34\1\315\7\34\4\0\1\34\22\0\4\34\7\0"+
    "\5\34\4\0\5\34\1\316\20\34\4\0\1\34\22\0"+
    "\4\34\7\0\5\34\4\0\1\34\1\317\24\34\4\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\16\34\1\320"+
    "\7\34\4\0\1\34\22\0\4\34\7\0\2\34\1\321"+
    "\2\34\4\0\26\34\4\0\1\34\22\0\4\34\7\0"+
    "\5\34\4\0\13\34\1\322\12\34\4\0\1\34\22\0"+
    "\4\34\7\0\5\34\4\0\20\34\1\323\5\34\4\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\22\34\1\324"+
    "\3\34\4\0\1\34\22\0\4\34\7\0\5\34\4\0"+
    "\16\34\1\325\7\34\4\0\1\34\22\0\4\34\7\0"+
    "\5\34\4\0\10\34\1\326\15\34\4\0\1\34\22\0"+
    "\4\34\7\0\5\34\4\0\10\34\1\327\15\34\4\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\1\34\1\330"+
    "\24\34\4\0\1\34\22\0\4\34\7\0\5\34\4\0"+
    "\16\34\1\331\7\34\4\0\1\34\22\0\4\34\7\0"+
    "\5\34\4\0\3\34\1\332\22\34\4\0\1\34\22\0"+
    "\4\34\7\0\5\34\4\0\20\34\1\333\5\34\4\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\11\34\1\334"+
    "\14\34\4\0\1\34\22\0\4\34\7\0\5\34\4\0"+
    "\21\34\1\335\4\34\4\0\1\34\22\0\4\34\7\0"+
    "\5\34\4\0\5\34\1\336\20\34\4\0\1\34\22\0"+
    "\4\306\75\0\4\306\20\0\1\337\54\0\4\34\7\0"+
    "\5\34\4\0\1\34\1\340\24\34\4\0\1\34\22\0"+
    "\4\34\7\0\5\34\4\0\6\34\1\341\17\34\4\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\1\34\1\342"+
    "\24\34\4\0\1\34\22\0\4\34\7\0\5\34\4\0"+
    "\4\34\1\343\21\34\4\0\1\34\22\0\4\34\7\0"+
    "\5\34\4\0\13\34\1\344\12\34\4\0\1\34\22\0"+
    "\4\34\7\0\5\34\4\0\3\34\1\345\22\34\4\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\20\34\1\346"+
    "\5\34\4\0\1\34\22\0\4\34\7\0\5\34\4\0"+
    "\6\34\1\347\17\34\4\0\1\34\22\0\4\34\7\0"+
    "\5\34\4\0\5\34\1\350\20\34\4\0\1\34\22\0"+
    "\4\34\7\0\5\34\4\0\5\34\1\351\20\34\4\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\5\34\1\352"+
    "\20\34\4\0\1\34\22\0\4\34\7\0\5\34\4\0"+
    "\10\34\1\353\15\34\4\0\1\34\22\0\4\34\7\0"+
    "\5\34\4\0\20\34\1\354\5\34\4\0\1\34\22\0"+
    "\4\34\7\0\5\34\4\0\22\34\1\355\3\34\4\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\20\34\1\356"+
    "\5\34\4\0\1\34\22\0\4\34\7\0\5\34\4\0"+
    "\13\34\1\357\12\34\4\0\1\34\22\0\4\34\7\0"+
    "\5\34\4\0\20\34\1\360\5\34\4\0\1\34\22\0"+
    "\4\34\7\0\5\34\4\0\1\34\1\361\24\34\4\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\3\34\1\362"+
    "\22\34\4\0\1\34\22\0\4\34\7\0\5\34\4\0"+
    "\3\34\1\363\22\34\4\0\1\34\22\0\4\34\7\0"+
    "\5\34\4\0\17\34\1\364\6\34\4\0\1\34\22\0"+
    "\4\34\7\0\5\34\4\0\1\34\1\365\24\34\4\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\7\34\1\366"+
    "\16\34\4\0\1\34\22\0\4\34\7\0\5\34\4\0"+
    "\17\34\1\367\6\34\4\0\1\34\22\0\4\34\7\0"+
    "\5\34\4\0\4\34\1\370\21\34\4\0\1\34\22\0"+
    "\4\34\7\0\5\34\4\0\10\34\1\371\15\34\4\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\5\34\1\372"+
    "\20\34\4\0\1\34\22\0\4\34\7\0\5\34\4\0"+
    "\11\34\1\373\14\34\4\0\1\34\22\0\4\34\7\0"+
    "\5\34\4\0\20\34\1\374\5\34\4\0\1\34\22\0"+
    "\4\34\7\0\5\34\4\0\20\34\1\375\5\34\4\0"+
    "\1\34\22\0\4\34\7\0\5\34\4\0\11\34\1\376"+
    "\14\34\4\0\1\34\22\0\4\34\7\0\5\34\4\0"+
    "\5\34\1\377\20\34\4\0\1\34\22\0\4\34\7\0"+
    "\5\34\4\0\22\34\1\u0100\3\34\4\0\1\34\22\0"+
    "\4\34\7\0\5\34\4\0\5\34\1\u0101\20\34\4\0"+
    "\1\34";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11505];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\2\1\2\11\2\1\1\11"+
    "\1\1\1\11\3\1\2\11\3\1\2\11\1\1\3\11"+
    "\23\1\1\11\1\1\2\11\1\1\1\11\1\0\1\11"+
    "\2\1\2\0\3\11\1\1\5\11\2\1\1\11\4\0"+
    "\1\1\3\11\3\1\1\0\30\1\1\0\1\11\1\1"+
    "\1\11\3\1\2\11\1\1\1\11\1\0\4\1\2\11"+
    "\1\1\1\11\34\1\2\11\3\0\1\11\1\1\3\0"+
    "\33\1\1\0\32\1\1\0\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  private static final class State {
    final int state;

    public State(int state) {
        this.state = state;
    }

    @Override
    public String toString() {
        return "yystate = " + state;
    }
  }

  private final Stack<State> states = new Stack<State>();

  private int commentStart;
  private int commentDepth;

  private void pushState(int state) {
    states.push(new State(yystate()));
    yybegin(state);
  }

  private void popState() {
    State state = states.pop();
    yybegin(state.state);
  }

  public _TactLexer() {
    this((java.io.Reader)null);
 }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TactLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case MULTI_LINE_COMMENT_STATE: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return MULTI_LINE_COMMENT;
            }  // fall though
            case 258: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 102: break;
          case 2:
            { return WS;
            }
          // fall through
          case 103: break;
          case 3:
            { return NLS;
            }
          // fall through
          case 104: break;
          case 4:
            { return NOT;
            }
          // fall through
          case 105: break;
          case 5:
            { pushState(STRING); return OPEN_QUOTE;
            }
          // fall through
          case 106: break;
          case 6:
            { return REMAINDER;
            }
          // fall through
          case 107: break;
          case 7:
            { return BIT_AND;
            }
          // fall through
          case 108: break;
          case 8:
            { return LPAREN;
            }
          // fall through
          case 109: break;
          case 9:
            { return RPAREN;
            }
          // fall through
          case 110: break;
          case 10:
            { return MUL;
            }
          // fall through
          case 111: break;
          case 11:
            { return PLUS;
            }
          // fall through
          case 112: break;
          case 12:
            { return COMMA;
            }
          // fall through
          case 113: break;
          case 13:
            { return MINUS;
            }
          // fall through
          case 114: break;
          case 14:
            { return DOT;
            }
          // fall through
          case 115: break;
          case 15:
            { return QUOTIENT;
            }
          // fall through
          case 116: break;
          case 16:
            { return INT;
            }
          // fall through
          case 117: break;
          case 17:
            { return COLON;
            }
          // fall through
          case 118: break;
          case 18:
            { return SEMICOLON;
            }
          // fall through
          case 119: break;
          case 19:
            { return LESS;
            }
          // fall through
          case 120: break;
          case 20:
            { return ASSIGN;
            }
          // fall through
          case 121: break;
          case 21:
            { return GREATER;
            }
          // fall through
          case 122: break;
          case 22:
            { return QUESTION;
            }
          // fall through
          case 123: break;
          case 23:
            { return AT;
            }
          // fall through
          case 124: break;
          case 24:
            { return IDENTIFIER;
            }
          // fall through
          case 125: break;
          case 25:
            { return LBRACK;
            }
          // fall through
          case 126: break;
          case 26:
            { return RBRACK;
            }
          // fall through
          case 127: break;
          case 27:
            { return BIT_XOR;
            }
          // fall through
          case 128: break;
          case 28:
            { return LBRACE;
            }
          // fall through
          case 129: break;
          case 29:
            { return BIT_OR;
            }
          // fall through
          case 130: break;
          case 30:
            { return RBRACE;
            }
          // fall through
          case 131: break;
          case 31:
            { return BIT_NOT;
            }
          // fall through
          case 132: break;
          case 32:
            { return STRING_ENTRY;
            }
          // fall through
          case 133: break;
          case 33:
            { popState(); return CLOSING_QUOTE;
            }
          // fall through
          case 134: break;
          case 34:
            { 
            }
          // fall through
          case 135: break;
          case 35:
            { return ASSERT_OP;
            }
          // fall through
          case 136: break;
          case 36:
            { return NOT_EQ;
            }
          // fall through
          case 137: break;
          case 37:
            { return REMAINDER_ASSIGN;
            }
          // fall through
          case 138: break;
          case 38:
            { return COND_AND;
            }
          // fall through
          case 139: break;
          case 39:
            { return BIT_AND_ASSIGN;
            }
          // fall through
          case 140: break;
          case 40:
            { return MUL_ASSIGN;
            }
          // fall through
          case 141: break;
          case 41:
            { return PLUS_ASSIGN;
            }
          // fall through
          case 142: break;
          case 42:
            { return MINUS_ASSIGN;
            }
          // fall through
          case 143: break;
          case 43:
            { return ARROW;
            }
          // fall through
          case 144: break;
          case 44:
            { pushState(MULTI_LINE_COMMENT_STATE);
    commentDepth = 0;
    commentStart = getTokenStart();
            }
          // fall through
          case 145: break;
          case 45:
            { return LINE_COMMENT;
            }
          // fall through
          case 146: break;
          case 46:
            { return QUOTIENT_ASSIGN;
            }
          // fall through
          case 147: break;
          case 47:
            { return SHIFT_LEFT;
            }
          // fall through
          case 148: break;
          case 48:
            { return LESS_OR_EQUAL;
            }
          // fall through
          case 149: break;
          case 49:
            { return EQ;
            }
          // fall through
          case 150: break;
          case 50:
            { return GREATER_OR_EQUAL;
            }
          // fall through
          case 151: break;
          case 51:
            { return SHIFT_RIGHT;
            }
          // fall through
          case 152: break;
          case 52:
            { return AS;
            }
          // fall through
          case 153: break;
          case 53:
            { return DO;
            }
          // fall through
          case 154: break;
          case 54:
            { return IF;
            }
          // fall through
          case 155: break;
          case 55:
            { return IN;
            }
          // fall through
          case 156: break;
          case 56:
            { return BIT_OR_ASSIGN;
            }
          // fall through
          case 157: break;
          case 57:
            { return COND_OR;
            }
          // fall through
          case 158: break;
          case 58:
            { return STRING_ESCAPE_ENTRY;
            }
          // fall through
          case 159: break;
          case 59:
            { if (commentDepth > 0) {
            commentDepth--;
        } else {
             int state = yystate();
             popState();
             zzStartRead = commentStart;
             return MULTI_LINE_COMMENT;
        }
            }
          // fall through
          case 160: break;
          case 60:
            { commentDepth++;
            }
          // fall through
          case 161: break;
          case 61:
            { return AND_ASSIGN;
            }
          // fall through
          case 162: break;
          case 62:
            { return HEX;
            }
          // fall through
          case 163: break;
          case 63:
            { return BIN;
            }
          // fall through
          case 164: break;
          case 64:
            { return OCT;
            }
          // fall through
          case 165: break;
          case 65:
            { return SHIFT_LEFT_ASSIGN;
            }
          // fall through
          case 166: break;
          case 66:
            { return SHIFT_RIGHT_ASSIGN;
            }
          // fall through
          case 167: break;
          case 67:
            { return BIN_LITERAL;
            }
          // fall through
          case 168: break;
          case 68:
            { return FUN;
            }
          // fall through
          case 169: break;
          case 69:
            { return LET;
            }
          // fall through
          case 170: break;
          case 70:
            { return TRY;
            }
          // fall through
          case 171: break;
          case 71:
            { return HEX_LITERAL;
            }
          // fall through
          case 172: break;
          case 72:
            { return OR_ASSIGN;
            }
          // fall through
          case 173: break;
          case 73:
            { return MULTI_LINE_COMMENT;
            }
          // fall through
          case 174: break;
          case 74:
            { return ELSE;
            }
          // fall through
          case 175: break;
          case 75:
            { return NULL;
            }
          // fall through
          case 176: break;
          case 76:
            { return TRUE;
            }
          // fall through
          case 177: break;
          case 77:
            { return WITH;
            }
          // fall through
          case 178: break;
          case 78:
            { return CATCH;
            }
          // fall through
          case 179: break;
          case 79:
            { return CONST;
            }
          // fall through
          case 180: break;
          case 80:
            { return FALSE;
            }
          // fall through
          case 181: break;
          case 81:
            { return TRAIT;
            }
          // fall through
          case 182: break;
          case 82:
            { return UNTIL;
            }
          // fall through
          case 183: break;
          case 83:
            { return WHILE;
            }
          // fall through
          case 184: break;
          case 84:
            { return CODE_OF;
            }
          // fall through
          case 185: break;
          case 85:
            { return IMPORT;
            }
          // fall through
          case 186: break;
          case 86:
            { return INIT_OF;
            }
          // fall through
          case 187: break;
          case 87:
            { return INLINE;
            }
          // fall through
          case 188: break;
          case 88:
            { return NATIVE;
            }
          // fall through
          case 189: break;
          case 89:
            { return REPEAT;
            }
          // fall through
          case 190: break;
          case 90:
            { return RETURN;
            }
          // fall through
          case 191: break;
          case 91:
            { return STRUCT;
            }
          // fall through
          case 192: break;
          case 92:
            { return EXTENDS;
            }
          // fall through
          case 193: break;
          case 93:
            { return FOREACH;
            }
          // fall through
          case 194: break;
          case 94:
            { return MUTATES;
            }
          // fall through
          case 195: break;
          case 95:
            { return RECEIVE;
            }
          // fall through
          case 196: break;
          case 96:
            { return VIRTUAL;
            }
          // fall through
          case 197: break;
          case 97:
            { return ABSTRACT;
            }
          // fall through
          case 198: break;
          case 98:
            { return CONTRACT;
            }
          // fall through
          case 199: break;
          case 99:
            { return EXTERNAL;
            }
          // fall through
          case 200: break;
          case 100:
            { return OVERRIDE;
            }
          // fall through
          case 201: break;
          case 101:
            { return PRIMITIVE;
            }
          // fall through
          case 202: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
